import numpy

'''
对大型数据集比如数组进行计算，它要比math模块计算快上倍，因为内部使用的是数组，在系统内存是连续的
'''

#需求，对列表的每个元素的值进行乘以2
x=[1,2,3,4,5]
print(x*2,"显然这种是错误的，这样只是对列表内容的复制")

x2=[]
for i in x :
      i*=2
      x2.append(i)
print(x2,"调用for循环遍历后使用*=直接赋值，再外部声明个空列表，append进去")



an=numpy.array(x)
print(an*2,"使用numpy模块，对数组的每个元素都进行乘以2操作")
print(an+4,"对每个数组的元素进行加值")

bn=numpy.array([5,4,3,2,1])
print(an-bn, "两个数组相运算，下标对下标进行运算")

'''

多维数组的运用：扩充python列表的索引功能，在打印指定行的基础上，能够打印列，以及指定数组的区域，或者单个元素 
   语法：[  行，列]  它会对表达式进行解析，内容其实还是下标
       如果行，列是一个区间范围的话(即在内部再使用切片)而非单个元素，它会打印组成的区域

             用法[:,n] 对多维数组打印指定的n列。n指的还是索引。 逗号前代表start:end  ,使用冒号占位，代表所有的行
             打印指定的区域  [1:4,0,3]  打印多维数组的2,3,4行的第1,2,3个元祖组成的数组
             
'''
duo=numpy.array([[1,2,3,4],
                 [5,6,7,8],
                 [9,10,11,12],
                 [13,14,15,16]])

print(duo[0],"打印多维数组第一行")
print(duo[0:2],"使用多维数组打印第1，2行")

print(duo[:,0]," :,target 打印多维数组第一列")
print(duo[:,0:3],":, start:end  打印1-3列")

print(duo[2,2],"试着打印第3行第三个元素")
print(duo[0:2,0:2],"打印指定区间范围")
print(duo[1:4,0:3],"-----[1:4,0,3]  打印多维数组的2,3,4行的第1,2,3个元祖组成的数组")

'''对指定区域范围内重新赋值，是在原有的基础上改变的'''
duo[1:4,0:3]+=10
print(duo)

'''对多维数组更改值，逻辑判断,相当于三元运算， 对每个元素进行判断，如果小于10，。。。 否则 XX

'''

print(numpy.where(duo<10,duo,10),"where 语句，如果小于10不变，大于10的话改为10")
print(numpy.where(duo<10,duo,duo-10),"如果小于10的话不变，大于10的话-10")